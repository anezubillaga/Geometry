/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ex1;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author anezubillaga
 */
public class GeomFrame extends javax.swing.JFrame implements ActionListener {
    private static JFrame frame;
    private static Calculadora calculadora;
    /**
     * Creates new form GeomFrame
     */
    public GeomFrame() {
        initComponents();
         //creación de una nueva ventana
        frame = new JFrame("GeomFrame");
        //Para que la ventana se ajuste al tamaño.  
        frame.pack();
        //Para que no se pueda escribir en el recuadro de abajo
        jTextArea1.setEditable(false);
        Load1.addActionListener(this);
        Load2.addActionListener(this);
        Area.addActionListener(this);
        Save.addActionListener(this);
        ClassName.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextField1 = new javax.swing.JTextField();
        Load1 = new javax.swing.JButton();
        Load2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        Area = new javax.swing.JButton();
        ClassName = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Load1.setText("Load");

        Load2.setText("Load");

        Save.setText("Save");

        Area.setText("Sort by Area");

        ClassName.setText("Sort by ClassName");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Load2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Save))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Area)
                                .addGap(18, 18, 18)
                                .addComponent(ClassName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Load1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Load1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Load2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Save))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Area)
                    .addComponent(ClassName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GeomFrame().setVisible(true);
            }
        });
      //  GeomFrame geomFrame = new GeomFrame();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Area;
    private javax.swing.JButton ClassName;
    private javax.swing.JButton Load1;
    private javax.swing.JButton Load2;
    private javax.swing.JButton Save;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables


    @Override
    public void actionPerformed(ActionEvent e) {
        String s = e.getActionCommand();
      // Compruebo que he llamado desde Load1
      if (e.getSource() == Load1)
      {
       if (s.equals("Load")) {
            Path currentRelativePath = Paths.get(jTextField1.getText());
            String p = currentRelativePath.toAbsolutePath().toString();
            File file = new File(p);
            try {
                String text = new String();
                calculadora = new Calculadora(file);
                calculadora.separar();
                List<Geometry> lista = calculadora.getLista();
                text = lista.stream().map((g) -> g.toCSV()+"-perimeter "+g.calcPerimeter()+"-area "+g.calcArea()+"\n").reduce(text, String::concat);
                jTextArea1.setText(text);
            } catch (FileNotFoundException ex) {
               // Logger.getLogger(GeomFrame.class.getName()).log(Level.SEVERE, null, ex);
                jTextArea1.setText("Fichero no encontrado");
            } catch (IOException ex) {
                Logger.getLogger(GeomFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
      }
      if (e.getSource() == Area){
          if (s.equals("Sort by Area")){
              String text = new String();
              List<Geometry> lista = calculadora.sortbyArea();
              text = lista.stream().map((g) -> g.toCSV()+"-perimeter "+g.calcPerimeter()+"-area "+g.calcArea()+"\n").reduce(text, String::concat);
              jTextArea1.setText(text);
          }
      }
      if (e.getSource() == ClassName){
          if (s.equals("Sort by ClassName")){
              String text = new String();
              List <Geometry> lista = calculadora.sortbyClassName();
            text = lista.stream().map((g) -> g.toCSV()+"-perimeter "+g.calcPerimeter()+"-area "+g.calcArea()+"\n").reduce(text, String::concat);
            jTextArea1.setText(text);
          }
          
      }
      if (e.getSource() == Load2){
          if (s.equals("Load")){
            Path currentRelativePath = Paths.get(jTextField2.getText());
            String p = currentRelativePath.toAbsolutePath().toString();
            File file = new File(p);
            try {
                String text = new String();
                calculadora = new Calculadora(file);
                calculadora.separar();
                List<Geometry> lista = calculadora.getLista();
                text = lista.stream().map((g) -> g.toCSV()+"-perimeter "+g.calcPerimeter()+"-area "+g.calcArea()+"\n").reduce(text, String::concat);
                jTextArea1.setText(text);
            } catch (FileNotFoundException ex) {
                jTextArea1.setText("Fichero no encontrado");
            } catch (IOException ex) {
                Logger.getLogger(GeomFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
      }
      if (e.getSource() == Save){
          if (s.equals("Save")){
            Path currentRelativePath = Paths.get(jTextField2.getText());
            String p = currentRelativePath.toAbsolutePath().toString();
            try {
                BufferedWriter w = new BufferedWriter(new java.io.FileWriter(p));
                List<Geometry> lista = calculadora.getLista();
                for(Geometry g : lista)
                    w.write(g.toCSV()+"\n");
                w.flush();
                w.close();
            } catch (IOException ex) {
                Logger.getLogger(GeomFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
      }
     }
}
   
 
